import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/email_model.dart';

class EmailService {
  static const String _resendApiKey = 're_g7yqaZU8_6A6jSEw7ERDjTma7YkvwCg9g';
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  /// Send OTP email via Resend API
  Future<bool> sendOTPEmail(String email, String otpCode) async {
    try {
      print('B·∫Øt ƒë·∫ßu g·ª≠i email OTP ƒë·∫øn: $email');
      final response = await http.post(
        Uri.parse('https://api.resend.com/emails'),
        headers: {
          'Authorization': 'Bearer $_resendApiKey',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'from': 'MetroPass <onboarding@resend.dev>',
          'to': [email],
          'subject': 'üîê M√£ X√°c Th·ª±c MetroPass',
          'html': _buildEmailTemplate(email, otpCode),
        }),
      );

      if (response.statusCode == 200) {
        print('G·ª≠i email OTP th√†nh c√¥ng ƒë·∫øn: $email');
        return true;
      } else {
        print('G·ª≠i email OTP th·∫•t b·∫°i. Status code: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('L·ªói khi g·ª≠i email OTP: $e');
      throw Exception('L·ªói g·ª≠i email: $e');
    }
  }

  /// Send OTP code for password reset
  Future<OTPResult> sendOTPCode(String email) async {
    try {
      print('Ki·ªÉm tra email trong h·ªá th·ªëng: $email');
      final userQuery = await _db
          .collection("users")
          .where("email", isEqualTo: email)
          .limit(1)
          .get();

      if (userQuery.docs.isEmpty) {
        print('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng: $email');
        return OTPResult.failure('Email kh√¥ng c√≥ trong h·ªá th·ªëng');
      }

      print('T·∫°o m√£ OTP m·ªõi cho email: $email');
      final emailOTP = EmailModel.createNewOTP(email);
      await _db.collection("password_reset_otps").add(emailOTP.toMap());
      print('L∆∞u m√£ OTP v√†o Firestore th√†nh c√¥ng');

      final emailSent = await sendOTPEmail(email, emailOTP.otpCode);

      if (emailSent) {
        print('G·ª≠i m√£ OTP th√†nh c√¥ng ƒë·∫øn email: $email');
        return OTPResult.success('M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n (h·∫øt h·∫°n sau 60 gi√¢y)');
      } else {
        print('G·ª≠i email OTP th·∫•t b·∫°i cho: $email');
        return OTPResult.failure('Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i');
      }
    } catch (e) {
      print('L·ªói khi g·ª≠i m√£ OTP: $e');
      return OTPResult.failure('ƒê√£ x·∫£y ra l·ªói: $e');
    }
  }

  /// Verify OTP code
  Future<OTPResult> verifyOTPCode(String email, String otpCode) async {
    try {
      print('B·∫Øt ƒë·∫ßu x√°c th·ª±c m√£ OTP cho email: $email');
      final otpQuery = await _db
          .collection("password_reset_otps")
          .where("email", isEqualTo: email)
          .where("otpCode", isEqualTo: otpCode)
          .where("isUsed", isEqualTo: false)
          .orderBy("createdAt", descending: true)
          .limit(1)
          .get();

      if (otpQuery.docs.isEmpty) {
        print('Kh√¥ng t√¨m th·∫•y m√£ OTP h·ª£p l·ªá cho email: $email v·ªõi m√£: $otpCode');
        return OTPResult.failure('M√£ OTP kh√¥ng h·ª£p l·ªá');
      }

      final otpDoc = otpQuery.docs.first;
      final emailModel = EmailModel.fromSnapshot(otpDoc);

      if (emailModel.isExpired) {
        print('M√£ OTP ƒë√£ h·∫øt h·∫°n cho email: $email');
        return OTPResult.failure('M√£ OTP ƒë√£ h·∫øt h·∫°n');
      }

      await otpDoc.reference.update({'isUsed': true});
      print('ƒê√°nh d·∫•u m√£ OTP ƒë√£ s·ª≠ d·ª•ng th√†nh c√¥ng');

      return OTPResult.success('X√°c th·ª±c m√£ OTP th√†nh c√¥ng');
    } catch (e) {
      print('L·ªói khi x√°c th·ª±c m√£ OTP: $e');
      return OTPResult.failure('ƒê√£ x·∫£y ra l·ªói: $e');
    }
  }

  /// Clean up expired OTP codes
  Future<void> cleanupExpiredOTPs() async {
    try {
      print('B·∫Øt ƒë·∫ßu d·ªçn d·∫πp c√°c m√£ OTP h·∫øt h·∫°n');
      final now = DateTime.now();
      final expiredOTPs = await _db
          .collection("password_reset_otps")
          .where("expiresAt", isLessThan: Timestamp.fromDate(now))
          .get();

      print('T√¨m th·∫•y ${expiredOTPs.docs.length} m√£ OTP h·∫øt h·∫°n c·∫ßn x√≥a');
      for (final doc in expiredOTPs.docs) {
        await doc.reference.delete();
      }
      print('D·ªçn d·∫πp m√£ OTP h·∫øt h·∫°n ho√†n t·∫•t');
    } catch (e) {
      print('L·ªói khi d·ªçn d·∫πp m√£ OTP h·∫øt h·∫°n: $e');
      throw Exception('L·ªói d·ªçn d·∫πp OTP h·∫øt h·∫°n: $e');
    }
  }

  String _buildEmailTemplate(String email, String otpCode) {
    return '''
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; color: white; border-radius: 10px 10px 0 0;">
          <h1 style="margin: 0; font-size: 28px;">MetroPass</h1>
          <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;">X√°c Th·ª±c T√†i Kho·∫£n</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 40px 30px; border-radius: 0 0 10px 10px;">
          <h2 style="color: #333; margin: 0 0 20px 0; font-size: 24px;">M√£ X√°c Th·ª±c OTP</h2>
          
          <p style="color: #555; font-size: 16px; line-height: 1.6;">Xin ch√†o,</p>
          <p style="color: #555; font-size: 16px; line-height: 1.6;">
            B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho: <strong style="color: #333;">$email</strong>
          </p>
          
          <div style="background: white; padding: 25px; border-radius: 12px; text-align: center; margin: 25px 0; border: 2px dashed #667eea; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
            <h1 style="color: #667eea; font-size: 42px; margin: 0; letter-spacing: 12px; font-weight: bold;">$otpCode</h1>
            <p style="color: #666; margin: 15px 0 0 0; font-size: 14px;">M√£ x√°c th·ª±c c·ªßa b·∫°n</p>
          </div>
          
          <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 15px 20px; margin: 20px 0; border-radius: 4px;">
            <p style="margin: 0; color: #856404; font-size: 14px;">
              <strong>‚ö†Ô∏è Quan tr·ªçng:</strong> M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <strong>60 gi√¢y</strong>. 
              Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.
            </p>
          </div>
          
          <p style="color: #555; font-size: 16px; line-height: 1.6; margin-top: 25px;">
            N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.
          </p>
          
          <div style="border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px;">
            <p style="color: #999; font-size: 12px; text-align: center; margin: 0;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng MetroPass.<br>
              Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.<br><br>
              <strong>¬© 2024 MetroPass. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</strong>
            </p>
          </div>
        </div>
      </div>
    ''';
  }
}

/// Result wrapper for OTP operations
class OTPResult {
  final bool success;
  final String message;

  OTPResult._({required this.success, required this.message});

  factory OTPResult.success(String message) {
    return OTPResult._(success: true, message: message);
  }

  factory OTPResult.failure(String message) {
    return OTPResult._(success: false, message: message);
  }
}